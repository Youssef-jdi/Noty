//
//  HomeNavigationViewController.swift
//  Noty
//
//  Created by Youssef Jdidi on 9/3/2021.
//  Copyright (c) 2021 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//
//  This template is meant to work with Swinject.

import UIKit

protocol HomeNavigationControllerProtocol: class, UINavigationControllerRouting {
    func set(interactor: HomeNavigationInteractorProtocol)

    func display(color: UIColor)
}

class HomeNavigationController: UINavigationController, HomeNavigationControllerProtocol, WillReceiveNewColor {

    // MARK: DI
    var interactor: HomeNavigationInteractorProtocol?

    func set(interactor: HomeNavigationInteractorProtocol) {
        self.interactor = interactor
    }

    // MARK: Properties
    private lazy var backButton: UIButton = {
        let backButton = UIButton(type: .close)
        return backButton
    }()
    private lazy var backItem: UIBarButtonItem = {
        let item = UIBarButtonItem(customView: backButton)
        return item
    }()

    // MARK: Lifecycle
    override func viewDidLoad() {
        super.viewDidLoad()
        // setup()
        interactor?.handleViewDidLoad()
        observeColorChange()
        self.delegate = self
    }

//    private func setup() {
//        guard let color = userDefaults?.themeColor else { return }
//        navigationBar.barTintColor = color
//        navigationBar.tintColor = color.isTooBright ? .black : .white
//        navigationBar.isTranslucent = false
//    }

    func observeColorChange() {
        handleNewColorReceived {[weak self] color in
            guard let self = self else { return }
            DispatchQueue.main.async {
//                self.navigationBar.barTintColor = color
//                self.navigationBar.tintColor = color.isTooBright ? .black : .white
//                color.isTooBright ? self.backButton.setImage(R.image.ic_arrow_back(), for: .normal) : self.backButton.setImage(R.image.ic_arrow_back_white(), for: .normal)
                self.display(color: color)
            }
        }
    }

    // MARK: - Object Lifecycle
    deinit {
        NotificationCenter.default.removeObserver(self)
    }

    // MARK: Methods
    func display(color: UIColor) {
        navigationBar.barTintColor = color
        navigationBar.tintColor = color.isTooBright ? .black : .white
        navigationBar.isTranslucent = false
        setBackButton(with: color)
    }

    private func setBackButton(with color: UIColor) {
        color.isTooBright ? backButton.setImage(R.image.ic_arrow_back(), for: .normal) : backButton.setImage(R.image.ic_arrow_back_white(), for: .normal)
    }
}

extension HomeNavigationController: UINavigationControllerDelegate {
    func navigationController(_ navigationController: UINavigationController, willShow viewController: UIViewController, animated: Bool) {
        viewController.navigationItem.backBarButtonItem = backItem
    }
}
