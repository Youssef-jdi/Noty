//
//  RootPresenter.swift
//  Noty
//
//  Created by Youssef Jdidi on 8/3/2021.
//  Copyright (c) 2021 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//
//  This template is meant to work with Swinject.

import UIKit

protocol RootPresenterProtocol {
    func set(viewController: RootViewControllerProtocol?)
    func set(homeStoryboard: Storyboard?)

    // add the functions that are called from interactor
    func present(with state: RootTabView.State)
    func presentContainerTabView(_ state: RootTabView.State)
    func present(saved color: UIColor)
}

class RootPresenter: RootPresenterProtocol {

    // MARK: DI
    weak var viewController: RootViewControllerProtocol?
    var homeStoryboard: Storyboard?

    func set(viewController: RootViewControllerProtocol?) {
        self.viewController = viewController
    }

    func set(homeStoryboard: Storyboard?) {
        self.homeStoryboard = homeStoryboard
    }
}

// MARK: Methods
extension  RootPresenter {

    func present(with state: RootTabView.State) {
        switch state {
        case .new:
            guard let vc = homeStoryboard?.viewController(identifier: HomeStoryboardId.new) as? HomeViewController else { return assertionFailure() }
            viewController?.display(vc)
        case .notys:
            guard let vc = homeStoryboard?.viewController(identifier: HomeStoryboardId.notys) as? NotysViewController else { return assertionFailure() }
            viewController?.display(vc)
        }
    }

    func presentContainerTabView(_ state: RootTabView.State) {
        viewController?.displayContainerTabView(state)
    }

    func present(saved color: UIColor) {
        viewController?.display(theme: color)
    }
}
