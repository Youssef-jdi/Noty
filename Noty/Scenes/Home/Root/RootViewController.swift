//
//  RootViewController.swift
//  Noty
//
//  Created by Youssef Jdidi on 8/3/2021.
//  Copyright (c) 2021 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//
//  This template is meant to work with Swinject.

import UIKit

protocol RootViewControllerProtocol: class, UIViewControllerRouting {
    func set(interactor: RootInteractorProtocol)
    func set(router: RootRouterProtocol)

    // add the functions that are called from the presenter
    func display(_ child: UIViewController)
    func displayContainerTabView(_ state: RootTabView.State)
    func display(theme color: UIColor)
}

class RootViewController: UIViewController, RootViewControllerProtocol, WillReceiveNewColor {

    // MARK: DI
    var interactor: RootInteractorProtocol?
    var router: RootRouterProtocol?

    func set(interactor: RootInteractorProtocol) {
        self.interactor = interactor
    }

    func set(router: RootRouterProtocol) {
        self.router = router
    }

    // MARK: Outlets
    @IBOutlet weak var rootTabView: RootTabView! {
        didSet {
            rootTabView.layer.applyShadow(offset: .init(width: 0, height: 5), radius: 10, opacity: 0.15, color: .black)
            rootTabView.addGestureRecognizer(UITapGestureRecognizer(target: self, action: #selector(containerTabViewTapped)))
        }
    }
    @IBOutlet weak var containerView: UIView!

    // MARK: Properties
    private var currentState: RootTabView.State = .new
    private lazy var settingsButton: UIButton = {
        let btn = UIButton(type: .custom)
        btn.addTarget(self, action: #selector(goToSettings), for: .touchUpInside)
        return btn
    }()

    private lazy var settingsBarButton: UIBarButtonItem? = {
        let uibarbutton = UIBarButtonItem(customView: settingsButton)
        return uibarbutton
    }()

    // MARK: Lifecycle
    override func viewDidLoad() {
        super.viewDidLoad()
        interactor?.handleViewDidLoad()
        setupNavigationBar()
        observeColorChange()
    }

    // MARK: - Object Lifecycle
    deinit {
        NotificationCenter.default.removeObserver(self)
    }
}

fileprivate extension RootViewController {

    func goToNew() {
        interactor?.handleChangeState(state: .new)
        currentState.toggle()
    }

    func goToNotys() {
        interactor?.handleChangeState(state: .notys)
        currentState.toggle()
    }

    @objc func containerTabViewTapped() {
        currentState == .new ? goToNew() : goToNotys()
    }

    func setupNavigationBar() {
        navigationItem.rightBarButtonItem = settingsBarButton
    }

    @objc func goToSettings() {
        router?.route(to: .settings)
    }

    func observeColorChange() {
        handleNewColorReceived {[weak self] color in
            DispatchQueue.main.async {[weak self] in
                guard let self = self else { return }
                self.rootTabView.setView(with: color)
                self.setSettingsButton(with: color)
            }
        }
    }
}

// MARK: Methods
extension RootViewController {

    func display(_ child: UIViewController) {
        self.children.forEach({
            $0.willMove(toParent: nil)
            $0.view.removeFromSuperview()
            $0.removeFromParent()
        })
        child.view.translatesAutoresizingMaskIntoConstraints = false
        addChild(child)
        // subViewController = viewController
        containerView.addSubview(child.view)
        child.view.topAnchor.constraint(equalTo: containerView.topAnchor).isActive = true
        child.view.bottomAnchor.constraint(equalTo: containerView.bottomAnchor).isActive = true
        child.view.leadingAnchor.constraint(equalTo: containerView.leadingAnchor).isActive = true
        child.view.trailingAnchor.constraint(equalTo: containerView.trailingAnchor).isActive = true
        child.didMove(toParent: self)
    }

    func displayContainerTabView(_ state: RootTabView.State) {
        rootTabView.toggle(state: state)
    }

    func display(theme color: UIColor) {
        rootTabView.setView(with: color)
        setSettingsButton(with: color)
    }

    private func setSettingsButton(with color: UIColor) {
        if color.isTooBright {
            settingsButton.setImage(R.image.settings_icon()?.withTintColor(.black), for: .normal)
            settingsButton.setTitleColor(.black, for: .normal)
        } else {
            settingsButton.setImage(R.image.settings_icon(), for: .normal)
            settingsButton.setTitleColor(.white, for: .normal)
        }
    }
}
