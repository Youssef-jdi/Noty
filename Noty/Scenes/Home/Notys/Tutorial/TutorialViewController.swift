//
//  TutorialViewController.swift
//  Noty
//
//  Created by Youssef Jdidi on 16/3/2021.
//  Copyright (c) 2021 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//
//  This template is meant to work with Swinject.

import UIKit

protocol TutorialViewControllerProtocol: class, UIViewControllerRouting {
    func set(interactor: TutorialInteractorProtocol)
    func set(router: TutorialRouterProtocol)

    // add the functions that are called from the presenter
    func hideTutorial()
    func displayState(_ state: TutorialState)
}

class TutorialViewController: UIViewController, TutorialViewControllerProtocol {

    // MARK: DI
    var interactor: TutorialInteractorProtocol?
    var router: TutorialRouterProtocol?

    func set(interactor: TutorialInteractorProtocol) {
        self.interactor = interactor
    }

    func set(router: TutorialRouterProtocol) {
        self.router = router
    }

    // MARK: Outlets
    @IBOutlet weak var detailView: UIView! {
        didSet {
            detailView.layer.cornerRadius = 16
        }
    }
    @IBOutlet weak var skipButton: UIButton! {
        didSet {
            skipButton.setTitle("SKIP TUTORIAL", for: .normal)
            skipButton.layer.cornerRadius = 8
            skipButton.clipsToBounds = true
        }
    }
    @IBOutlet weak var titleLabel: UILabel!
    @IBOutlet weak var descriptionLabel: UILabel!
    @IBOutlet weak var nextButton: UIButton! {
        didSet {
            nextButton.setTitle("NEXT", for: .normal)
            nextButton.layer.cornerRadius = 8
            nextButton.clipsToBounds = true
        }
    }
    @IBOutlet weak var swipeImageView: UIImageView!
    @IBOutlet weak var positionConstraint: NSLayoutConstraint!

    // MARK: Properties

    // MARK: Lifecycle
    override func viewDidLoad() {
        super.viewDidLoad()
        prepareShadows()
        interactor?.handleViewDidLoad()
    }

    override func viewDidAppear(_ animated: Bool) {
        super.viewDidAppear(animated)
        setupViewPosition()
    }

    // MARK: Actions
    @IBAction func skipButtonClicked(_ sender: Any) {
        interactor?.handleFinishTutorial()
    }

    @IBAction func nextButtonClicked(_ sender: Any) {
        interactor?.handleNextState()
    }
}

// MARK: Methods
extension TutorialViewController {

    func display(error: Error) {}

    /**
     - 60 is the root tabview height
     */
    private func setupViewPosition() {
        positionConstraint.constant = 120
        UIView.animate(withDuration: 1) {[weak self] in
            guard let self = self else { return }
            self.view.layoutIfNeeded()
        } completion: {[weak self] _ in
            guard let self = self else { return }
            self.setupSwipeAnimation(with: -1)
        }
    }

    /**
     Directions: -1 for right swipe and 1 for left swipe
     */
    private func setupSwipeAnimation(with direction: CGFloat) {
        self.swipeImageView.transform = .init(translationX: direction * (UIScreen.main.bounds.width / 2) + (-direction * 24), y: 0)
        UIView.animate(
            withDuration: 1.2,
            delay: 0,
            options: .repeat) {[weak self] in
            guard let self = self else { return }
            self.swipeImageView.transform = CGAffineTransform(translationX: direction * -50, y: 0)
            self.view.layoutIfNeeded()
        } completion: {_ in }
    }

    private func prepareShadows() {
        detailView.layer.applyShadow(
            offset: .init(width: 0, height: 2),
            radius: 10,
            opacity: 0.2,
            color: .black)
        skipButton.layer.applyShadow(
            offset: .init(width: 0, height: 2),
            radius: 10,
            opacity: 0.2,
            color: .black)
    }

    func hideTutorial() {
        dismiss(animated: true, completion: nil)
    }

    func displayState(_ state: TutorialState) {
        let nextTitle = state != .left ? "NEXT" : "GOT IT"
        nextButton.setTitle(nextTitle, for: .normal)
        descriptionLabel.configureParagraph(with: state.description, fontSize: 15, alignment: .left)
        setupSwipeAnimation(with: 1)
        titleLabel.text = state.title
        view.layoutIfNeeded()

        UIView.animate(withDuration: 0.3, animations: {[weak self] in
            guard let self = self else { return }
            self.skipButton.alpha = state == .left ? 0 : 1
            self.view.layoutIfNeeded()
        })
    }
}
