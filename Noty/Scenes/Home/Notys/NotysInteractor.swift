//
//  NotysInteractor.swift
//  Noty
//
//  Created by Youssef Jdidi on 8/3/2021.
//  Copyright (c) 2021 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//
//  This template is meant to work with Swinject.

import UIKit

protocol NotysInteractorProtocol {
    func fetchNotes()
    func deleteNote(note: NoteModel)
    func updateNoteWithFavorite(note: NoteModel)
    func handleViewDidAppear()
}

class NotysInteractor: NotysInteractorProtocol {

    // MARK: DI
    var presenter: NotysPresenterProtocol
    var noteService: NoteServiceProtocol
    var errorHandler: ErrorHandlerProtocol
    var userDefaultManager: UserDefaultsManagerProtocol

    init(
        presenter: NotysPresenterProtocol,
        noteService: NoteServiceProtocol,
        errorHandler: ErrorHandlerProtocol,
        userDefaultManager: UserDefaultsManagerProtocol
    ) {
        self.presenter = presenter
        self.noteService = noteService
        self.errorHandler = errorHandler
        self.userDefaultManager = userDefaultManager
    }
}

extension NotysInteractor {
    func fetchNotes() {
        noteService.fetchNotes {[weak self] result in
            guard let self = self else { return }
            switch result {
            case .success(let notes):
                guard let noteEntities = notes as? [Note] else { return }
                let notesArray = noteEntities.compactMap { NoteModel.map(from: $0) }
                self.presenter.present(fetched: notesArray)
            case .failure(let error):
                self.errorHandler.handle(error)
            }
        }
    }

    func updateNoteWithFavorite(note: NoteModel) {
        noteService.updateNoteFavorite(from: note) {[weak self] result in
            guard let self = self else { return }
            self.presenter.presentIsFavorite(result: result, on: note)
        }
    }

    func deleteNote(note: NoteModel) {
        noteService.deleteNote(note)
    }

    /**
     -Will display the tutorial only when we have one note
      and the tutorial is not displayed
     */
    func handleViewDidAppear() {
        if noteService.getNotesCount() == 1 && !userDefaultManager.isTutoDisplayed {
            presenter.presentTutoIfNeeded()
        }
    }
}
