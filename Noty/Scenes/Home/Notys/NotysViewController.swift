//
//  NotysViewController.swift
//  Noty
//
//  Created by Youssef Jdidi on 8/3/2021.
//  Copyright (c) 2021 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//
//  This template is meant to work with Swinject.

import UIKit

protocol NotysViewControllerProtocol: class, UIViewControllerRouting {
    func set(interactor: NotysInteractorProtocol)
    func set(router: NotysRouterProtocol)
    func set(tableViewUtils: NotysTableViewUtilsProtocol)

    // add the functions that are called from the presenter
    func display(error: Error)
    func display(notes: [NoteModel])
    func displayTutoIfNeeded()
    func displayIsFavorite(result: Result<Storable?, Error>, on note: NoteModel)
}

class NotysViewController: UIViewController, NotysViewControllerProtocol {

    // MARK: DI
    var interactor: NotysInteractorProtocol?
    var router: NotysRouterProtocol?
    var tableViewUtils: NotysTableViewUtilsProtocol?

    func set(interactor: NotysInteractorProtocol) {
        self.interactor = interactor
    }

    func set(router: NotysRouterProtocol) {
        self.router = router
    }

    func set(tableViewUtils: NotysTableViewUtilsProtocol) {
        self.tableViewUtils = tableViewUtils
    }

    // MARK: Outlets
    @IBOutlet weak var tableView: UITableView!

    // MARK: Properties

    // MARK: Lifecycle
    override func viewDidLoad() {
        super.viewDidLoad()
        setupTableView()
        showSpinner()
        interactor?.fetchNotes()
    }

    override func viewDidAppear(_ animated: Bool) {
        super.viewDidAppear(animated)
        interactor?.handleViewDidAppear()
    }

    // MARK: Actions

}

// MARK: Methods
extension NotysViewController {

    func display(error: Error) {}

    func display(notes: [NoteModel]) {
        hideSpinner()
        notes.count > 0 ? tableViewUtils?.set(data: notes) : configureEmptyView()
        tableView.reloadData()
    }

    func displayTutoIfNeeded() {
        router?.route(to: .tuto)
    }

    func displayIsFavorite(result: Result<Storable?, Error>, on note: NoteModel) {
        switch result {
        case .success:
            if let index = tableViewUtils?.data.firstIndex(of: note) {
                tableViewUtils?.data[index].isFavorite.toggle()
            }
        case .failure: break
        }
    }
}

// MARK: Private Methods
private extension NotysViewController {
    func setupTableView() {
        tableView.delegate = tableViewUtils
        tableView.dataSource = tableViewUtils
        tableViewUtils?.delegate = self
        tableView.register(UINib(resource: R.nib.noteCell), forCellReuseIdentifier: R.nib.noteCell.identifier)
    }
}

extension NotysViewController: NoteUtilsDelegate {
    func setReminder(on note: NoteModel, at indexPath: IndexPath) {
        router?.route(to: .date(note: note))
    }

    func setFavorite(on note: NoteModel, at indexPath: IndexPath) {
        interactor?.updateNoteWithFavorite(note: note)
    }

    func delete(note: NoteModel, at indexPath: IndexPath) {
        interactor?.deleteNote(note: note)
        tableViewUtils?.data.remove(at: indexPath.row)
        tableView.deleteRows(at: [indexPath], with: .right)
        guard let count = tableViewUtils?.data.count, count > 0 else { return }
        configureEmptyView()
    }
}

// MARK: Empty dataSource Methods
extension NotysViewController: EmptyBackgroundViewDelegate {
    func configureEmptyView() {
        let view = EmptyBackgroundView(frame: tableView.bounds)
        view.delegate = self
        tableView.backgroundView = view
        tableView.separatorStyle = .none
    }

    func tapNewNote() {}
}
