//
//  HomeInteractor.swift
//  Noty
//
//  Created by Youssef Jdidi on 12/2/2021.
//  Copyright (c) 2021 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//
//  This template is meant to work with Swinject.

import UIKit

protocol HomeInteractorProtocol {
    func handleViewDidLoad()
    func startRecording()
    func pauseRecording()
    func getCurrentAmplitude()
}

class HomeInteractor: HomeInteractorProtocol {
    
    // MARK: DI
    var presenter: HomePresenterProtocol
    var permissionManager: PermissionManagerProtocol
    var transcriptorManager: TranscriptorManagerProtocol
    
    init(
        presenter: HomePresenterProtocol,
        permisssionManager: PermissionManagerProtocol,
        transcriptorManager: TranscriptorManagerProtocol
    ) {
        self.presenter = presenter
        self.permissionManager = permisssionManager
        self.transcriptorManager = transcriptorManager
    }
}

extension HomeInteractor {
    func startRecording() {
        self.checkPermission { [weak self] in
            guard let self = self else { return }
            self.transcriptorManager.startRecording()
            self.presenter.presentRecordingState(.isRecoding)
        }
    }
    
    func pauseRecording() {
        transcriptorManager.pauseRecording()
        presenter.presentRecordingState(.isPaused)
    }

    func handleViewDidLoad() {
        transcriptorManager.delegate = self
        transcriptorManager.prepare()
    }

    func getCurrentAmplitude() {
        presenter.presentCurrentAmplitude(with: transcriptorManager.getCurrentAmplitude())
    }
}

private extension HomeInteractor {
    func checkPermission(onCompletion: @escaping () -> Void) {
        self.requestAudioPermission {
            self.requestSpeechPermission {
                onCompletion()
            }
        }
    }
    
    func requestAudioPermission(onCompletion: @escaping () -> Void) {
        permissionManager.requestAudioPermission { result in
            switch result {
            case .success: onCompletion()
            case .failure: self.presenter.presentPermissionError(error: .audio)
            }
        }
    }
    
    func requestSpeechPermission(onCompletion: @escaping () -> Void) {
        permissionManager.requestSpeechPermission { result in
            switch result {
            case .success: onCompletion()
            case .failure: self.presenter.presentPermissionError(error: .speech)
            }
        }
    }
}

extension HomeInteractor: SpeechTranscriptionDelegate {
    func transcriptor(failedWithError error: Error) {
        print("failed with error: \(error)")
    }

    func transcriptor(didTranscript transcription: String, completed: Bool) {
        presenter.presentTranscripted(transcripted: transcription)
    }
}
