//
//  HomeViewController.swift
//  Noty
//
//  Created by Youssef Jdidi on 12/2/2021.
//  Copyright (c) 2021 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//
//  This template is meant to work with Swinject.

import UIKit

protocol HomeViewControllerProtocol: class, UIViewControllerRouting {
    func set(interactor: HomeInteractorProtocol)
    func set(router: HomeRouterProtocol)
    func set(alertPresenter: AlertPresenterProtocol)

    func display(error: Error)
    func displayPermissionError(error: HomeModels.PermissionError)
    func displayTranscriptedText(text: String)
    func displayRecordingState(state: HomeModels.RecordState)
    func displayCurrentAmplitude(with amplitude: Double)
}

class HomeViewController: UIViewController, HomeViewControllerProtocol {

    // MARK: DI
    var interactor: HomeInteractorProtocol?
    var router: HomeRouterProtocol?
    var alertPresenter: AlertPresenterProtocol?

    func set(interactor: HomeInteractorProtocol) {
        self.interactor = interactor
    }

    func set(router: HomeRouterProtocol) {
        self.router = router
    }

    func set(alertPresenter: AlertPresenterProtocol) {
        self.alertPresenter = alertPresenter
    }
    
    // MARK: Outlets
    @IBOutlet weak var textMemoView: VTextView! {
        didSet {
            textMemoView.isEditable = true
            textMemoView.isSelectable = true
            textMemoView.showsVerticalScrollIndicator = false
            textMemoView.showsHorizontalScrollIndicator = false
            textMemoView.bounces = false
            textMemoView.font = UIFont.systemFont(ofSize: 19)
        }
    }
    @IBOutlet weak var recordButton: AppButton!
    @IBOutlet weak var recordingStateLabel: UILabel! {
        didSet {
            recordingStateLabel.alpha = 0
        }
    }
    @IBOutlet weak var amplitudeConstraint: NSLayoutConstraint!
    @IBOutlet weak var sendButton: AppButton!
    @IBOutlet weak var buttonStackView: UIStackView! {
        didSet {
            buttonStackView.alpha = 0
        }
    }
    @IBOutlet weak var clearButton: UIButton!
    @IBOutlet weak var reminderButton: UIButton!

    // MARK: Properties
    private var timer: Timer?
    private var currentAmplitude: Double?

    // MARK: Lifecycle
    override func viewDidLoad() {
        super.viewDidLoad()
        interactor?.handleViewDidLoad()
    }

    #warning("Check if message is empty if so display an alert to discard memo and set AudioKit to nil")
    override func viewWillDisappear(_ animated: Bool) {
        super.viewWillDisappear(animated)
        interactor?.handleViewWillDisappear()
    }

    // MARK: Actions
    @IBAction func recordButtonClicked(_ sender: Any) {
        handleRecordButtonClicked()
    }

    @IBAction func sendButtonClicked(_ sender: Any) {
    }

    #warning("Add discard popup")
    @IBAction func clearButtonClicked(_ sender: Any) {
        interactor?.clearRecording()
    }

    @IBAction func reminderButtonClicked(_ sender: Any) {
    }
}

// MARK: Methods
extension HomeViewController {

    func display(error: Error) {}

    func displayPermissionError(error: HomeModels.PermissionError) {
        switch error {
        case .audio: alertPresenter?.presentPermissionAlert(with: .audio)
        case .speech: alertPresenter?.presentPermissionAlert(with: .speech)
        }
    }

    func displayTranscriptedText(text: String) {
        UIView.animate(withDuration: 0.3) { [weak self] in
            guard let self = self else { return }
            self.buttonStackView.alpha = 1
            self.textMemoView.textColor = .black
            self.textMemoView.text = text
            self.textMemoView.scrollRangeToVisible(
                NSRange(location: self.textMemoView.text.count - 1,
                        length: 0))
        }
    }

    func displayRecordingState(state: HomeModels.RecordState) {
        switch state {
        case .isRecoding: handleStartingRecording()
        case .isPaused: handlePauseRecording()
        case .isCleared: handleClearRecording()
        }
    }

    func displayCurrentAmplitude(with amplitude: Double) {
        self.currentAmplitude = amplitude
    }
}

private extension HomeViewController {
    func handleRecordButtonClicked() {
        recordButton.isSelected ? pauseRecording() : startRecording()
    }

    func pauseRecording() {
        interactor?.pauseRecording()
    }

    func startRecording() {
        interactor?.startRecording()
    }

    func handleStartingRecording() {
        UIView.animate(withDuration: 0.3) { [weak self] in
            guard let self = self else { return }
            self.view.endEditing(true)
            self.recordingStateLabel.alpha = 1
            self.recordButton.isSelected = true
            self.startAmplitudeRecorder()
            self.recordingStateLabel.text = "Listening..."
            self.sendButton.isHidden = true
        }
    }

    func handlePauseRecording () {
        UIView.animate(withDuration: 0.3) { [weak self] in
            guard let self = self else { return }
            self.recordingStateLabel.alpha = 1
            self.recordButton.isSelected = false
            self.stopAmplitudeRecorder()
            self.recordingStateLabel.text = "Paused"
            self.sendButton.isHidden = !self.textMemoView.isEmpty
        }
    }

    func handleClearRecording() {
        UIView.animate(withDuration: 0.3) { [weak self] in
            guard let self = self else { return }
            self.textMemoView.setPlaceholder()
            self.buttonStackView.alpha = 0
            self.recordingStateLabel.alpha = 0
            self.recordButton.isSelected = false
            self.stopAmplitudeRecorder()
            self.sendButton.isHidden = true
        }
    }

    func startAmplitudeRecorder() {
        if let timer = timer {
            timer.invalidate()
            self.timer = nil
        }

        timer = Timer(timeInterval: 0.1, repeats: true) { [weak self] _ in
            guard let self = self else { return }
            self.interactor?.getCurrentAmplitude()
            guard let currentAmplitude = self.currentAmplitude else { return }
            Console.log(type: .message, "\(currentAmplitude)")
            self.amplitudeConstraint.constant = CGFloat(200 * currentAmplitude + 5)
            UIView.animate(withDuration: 0.1, animations: {
                self.view.layoutIfNeeded()
            })
        }
        if let timer = timer {
            RunLoop.main.add(timer, forMode: .default)
        }
    }

    func stopAmplitudeRecorder() {
        timer?.invalidate()
        timer = nil
        restoreAmplitudeView()
    }

    func restoreAmplitudeView() {
        self.amplitudeConstraint.constant = 0
        DispatchQueue.main.async {
            UIView.animate(withDuration: 0.4, animations: {
                self.view.layoutIfNeeded()
            })
        }
    }
}
