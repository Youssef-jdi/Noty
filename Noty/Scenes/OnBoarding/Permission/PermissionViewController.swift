//
//  PermissionViewController.swift
//  Noty
//
//  Created by Youssef Jdidi on 12/2/2021.
//  Copyright (c) 2021 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//
//  This template is meant to work with Swinject.

import UIKit

protocol PermissionViewControllerProtocol: class, UIViewControllerRouting {
    func set(interactor: PermissionInteractorProtocol)
    func set(router: PermissionRouterProtocol)

    // add the functions that are called from the presenter
    func display(error: Error)
    func presentHandlingPermission()
}

class PermissionViewController: UIViewController, PermissionViewControllerProtocol {

    // MARK: DI
    var interactor: PermissionInteractorProtocol?
    var router: PermissionRouterProtocol?

    func set(interactor: PermissionInteractorProtocol) {
        self.interactor = interactor
    }

    func set(router: PermissionRouterProtocol) {
        self.router = router
    }

    // MARK: Outlets
    @IBOutlet weak var activityIndicator: UIActivityIndicatorView!

    // MARK: Properties

    // MARK: Lifecycle
    override func viewDidLoad() {
        super.viewDidLoad()
    }

    // MARK: Actions
    @IBAction func giverPermissionClicked(_ sender: Any) {
        activityIndicator.isHidden = false
        activityIndicator.startAnimating()
        interactor?.requestPermissions()
    }
}

// MARK: Methods
extension PermissionViewController {

    func display(error: Error) {}

    func presentHandlingPermission() {
        DispatchQueue.main.async {[weak self] in
            guard let self = self else { return }
            self.activityIndicator.stopAnimating()
            self.activityIndicator.isHidden = true
            self.router?.route(to: .home)
        }
    }
}
