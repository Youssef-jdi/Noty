//
//  PermissionInteractor.swift
//  Noty
//
//  Created by Youssef Jdidi on 12/2/2021.
//  Copyright (c) 2021 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//
//  This template is meant to work with Swinject.

import UIKit

protocol PermissionInteractorProtocol {
    func requestPermissions()
}

class PermissionInteractor: PermissionInteractorProtocol {

    // MARK: DI
    var presenter: PermissionPresenterProtocol
    var permissionManager: PermissionManagerProtocol

    init(
        presenter: PermissionPresenterProtocol,
        permissionManager: PermissionManagerProtocol
        ) {
        self.presenter = presenter
        self.permissionManager = permissionManager
    }
}

extension PermissionInteractor {
    func requestPermissions() {
        requestAudio {[weak self] in
            guard let self = self else { return }
            self.requestSpeech {[weak self] in
                guard let self = self else { return }
                self.requestNotif {[weak self] in
                    guard let self = self else { return }
                    self.presenter.presentFinishHandlingPermissions()
                }
            }
        }
    }

    private func requestAudio(completion: @escaping () -> Void) {
        permissionManager.requestAudioPermission { _ in
           completion()
        }
    }

    private func requestSpeech(completion: @escaping () -> Void) {
        permissionManager.requestSpeechPermission { _ in
            completion()
        }
    }

    private func requestNotif(completion: @escaping () -> Void) {
        permissionManager.requestNotificationPermission { _ in
            completion()
        }
    }
}
