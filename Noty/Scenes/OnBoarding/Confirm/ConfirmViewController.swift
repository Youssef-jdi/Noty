//
//  ConfirmViewController.swift
//  Noty
//
//  Created by Youssef Jdidi on 15/2/2021.
//  Copyright (c) 2021 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//
//  This template is meant to work with Swinject.

import UIKit

protocol ConfirmViewControllerProtocol: class, UIViewControllerRouting {
    func set(interactor: ConfirmInteractorProtocol)
    func set(router: ConfirmRouterProtocol)
    func set(email: String)

    // add the functions that are called from the presenter
    func display(error: Error)
    func display(confirmText: NSMutableAttributedString)
    func display(tryOtherMail: NSMutableAttributedString)
    func display(actionSheet: UIAlertController)
}

class ConfirmViewController: UIViewController, ConfirmViewControllerProtocol {

    // MARK: DI
    var interactor: ConfirmInteractorProtocol?
    var router: ConfirmRouterProtocol?

    func set(interactor: ConfirmInteractorProtocol) {
        self.interactor = interactor
    }

    func set(router: ConfirmRouterProtocol) {
        self.router = router
    }

    func set(email: String) {
        self.email = email
    }

    // MARK: Outlets
    @IBOutlet weak var confirmationTextLabel: UILabel!
    @IBOutlet weak var tryOtherMailTextView: UITextView! {
        didSet {
            tryOtherMailTextView.delegate = self
        }
    }

    // MARK: Properties
    var email: String?

    // MARK: Lifecycle
    override func viewDidLoad() {
        super.viewDidLoad()
        Console.log(type: .success, email!)
        interactor?.handeViewDidLoad(email: email ?? "")
    }
    // MARK: Actions

}

// MARK: Methods
extension ConfirmViewController {

    func display(error: Error) {}

    func display(confirmText: NSMutableAttributedString) {
        confirmationTextLabel.attributedText = confirmText
        let tap = UITapGestureRecognizer(target: self, action: #selector(openMail(tap:)))
        confirmationTextLabel.addGestureRecognizer(tap)
        confirmationTextLabel.isUserInteractionEnabled = true
    }

    @objc func openMail(tap: UITapGestureRecognizer) {
        guard let range = confirmationTextLabel.text?.range(of: "click here")?.nsRange else {
            return
        }
        if tap.didTapAttributedTextInLabel(label: confirmationTextLabel, inRange: range) {
            interactor?.handleEmailOpenApp()
        }
    }

    func display(tryOtherMail: NSMutableAttributedString) {
        tryOtherMailTextView.attributedText = tryOtherMail
        tryOtherMailTextView.textAlignment = .center
    }

    func display(actionSheet: UIAlertController) {
        present(actionSheet, animated: true, completion: nil)
    }
}

// MARK: - TextView Delegate
extension ConfirmViewController: UITextViewDelegate {
    func textView(_ textView: UITextView, shouldInteractWith URL: URL, in characterRange: NSRange, interaction: UITextItemInteraction) -> Bool {
        router?.route(to: .login)
        return true
    }
}
