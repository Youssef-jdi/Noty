//
//  LoginViewController.swift
//  Noty
//
//  Created by Youssef Jdidi on 15/2/2021.
//  Copyright (c) 2021 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//
//  This template is meant to work with Swinject.

import UIKit
import GoogleSignIn

protocol LoginViewControllerProtocol: class, UIViewControllerRouting {
    func set(interactor: LoginInteractorProtocol)
    func set(router: LoginRouterProtocol)
    func set(toastManager: ToastManagerProtocol)

    // add the functions that are called from the presenter
    func display(error: Error)
    func displayValidationSuccess(field: LoginModels.Validation)
    func displayValidationError(field: LoginModels.Validation, error: DataValidationError)
    func displaySendingEmail(result: Result<Void, Error>)
}

class LoginViewController: UIViewController, LoginViewControllerProtocol {

    // MARK: DI
    var interactor: LoginInteractorProtocol?
    var router: LoginRouterProtocol?
    var toastManager: ToastManagerProtocol?

    func set(interactor: LoginInteractorProtocol) {
        self.interactor = interactor
    }

    func set(router: LoginRouterProtocol) {
        self.router = router
    }

    func set(toastManager: ToastManagerProtocol) {
        self.toastManager = toastManager
    }

    // MARK: Outlets
    @IBOutlet weak var scrollView: UIScrollView!
    @IBOutlet weak var emailTextfield: UITextField! {
        didSet {
            emailTextfield.delegate = self
        }
    }
    @IBOutlet weak var confirmMailTextfield: UITextField! {
        didSet {
            confirmMailTextfield.delegate = self
        }
    }
    @IBOutlet weak var emailErrorLabel: UILabel!
    @IBOutlet weak var confirmMailErrorLabel: UILabel!

    // MARK: Properties

    // MARK: Lifecycle
    override func viewDidLoad() {
        super.viewDidLoad()
        setupNotification()
        setupKeyboardHandling()
        setupTapToDismiss()
        interactor?.prepareGoogleSignIn()
    }

    // MARK: - Object Lifecycle
    deinit {
        NotificationCenter.default.removeObserver(self)
    }

    // MARK: Actions
    @IBAction func backButtonClicked(_ sender: Any) {
        router?.route(to: .welcome)
    }
    @IBAction func confirmButtonClicked(_ sender: Any) {
        showSpinner()
        interactor?.startSignIn(with: emailTextfield.text ?? "")
    }
    @IBAction func googleButtonClicked(_ sender: Any) {
        interactor?.startGoogeSignIn(on: self)
    }
}

// MARK: Methods
extension LoginViewController {

    func display(error: Error) {}

    func displayValidationSuccess(field: LoginModels.Validation) {
        switch field {
        case .mail: displayEmailSuccess()
        case .confirmMail: displayConfirmSuccess()
        }
    }

    func displayValidationError(field: LoginModels.Validation, error: DataValidationError) {
        switch field {
        case .mail: displayEmailErrors(error: error.localizedDescription)
        case .confirmMail: displayConfirmErrors(error: error.localizedDescription)
        }
    }

    func displaySendingEmail(result: Result<Void, Error>) {
        hideSpinner()
        switch result {
        case .success: router?.route(to: .confirm(emailTextfield.text ?? ""))
        case .failure: toastManager?.showToast(for: .resendEmailFailure)
        }
    }
}

// MARK: KeyBoard Handling
fileprivate extension LoginViewController {

    func setupKeyboardHandling() {
        NotificationCenter.default.addObserver(self, selector: #selector(keyboardWillShow), name: UIResponder.keyboardWillShowNotification, object: nil)
        NotificationCenter.default.addObserver(self, selector: #selector(keyboardWillHide), name: UIResponder.keyboardWillHideNotification, object: nil)
    }

    @objc func keyboardWillShow(notification: NSNotification) {
        guard let userInfo = notification.userInfo else { return }
        var keyboardFrame = (userInfo[UIResponder.keyboardFrameBeginUserInfoKey] as? NSValue)?.cgRectValue
        keyboardFrame = view.convert(keyboardFrame!, from: nil)

        var contentInset: UIEdgeInsets = scrollView.contentInset
        contentInset.bottom = (keyboardFrame?.size.height)!

        scrollView.contentInset = UIEdgeInsets(top: contentInset.top, left: contentInset.left, bottom: contentInset.bottom + 20, right: contentInset.right)
    }

    @objc func keyboardWillHide(notification: NSNotification) {
        let contentInset = UIEdgeInsets.zero
        scrollView.contentInset = contentInset
    }

    func setupTapToDismiss() {
        view.addGestureRecognizer(UITapGestureRecognizer(target: self, action: #selector(tapToDismissKeyboard)))
    }

    @objc func tapToDismissKeyboard() {
        self.view.endEditing(true)
    }
}

// MARK: - UITextFieldDelegate
extension LoginViewController: UITextFieldDelegate {
    func textFieldShouldReturn(_ textField: UITextField) -> Bool {
        switch textField {
        case emailTextfield: checkEmailValidation()
        case confirmMailTextfield: checkConfirmValidation()
        default: break
        }

        return false
    }

    func textFieldDidBeginEditing(_ textField: UITextField) {
         resetErrors(for: textField)
    }

    func checkEmailValidation() {
        interactor?.validateEmail(email: emailTextfield.text ?? "")
    }

    func checkConfirmValidation() {
        interactor?.validateConfirmMail(email: emailTextfield.text ?? "", confirmEmail: confirmMailTextfield.text ?? "")
    }
}

// MARK: Private Methods
fileprivate extension LoginViewController {
    func displayEmailErrors(error: String) {
        emailTextfield.resignFirstResponder()
        emailTextfield.shakeError()
        emailErrorLabel.isHidden = false
        emailErrorLabel.text = error
    }

    func displayConfirmErrors(error: String) {
        confirmMailTextfield.resignFirstResponder()
        confirmMailTextfield.shakeError()
        confirmMailErrorLabel.isHidden = false
        confirmMailErrorLabel.text = error
    }

    func displayEmailSuccess() {
        confirmMailTextfield.becomeFirstResponder()
        resetErrors(for: emailTextfield)
    }

    func displayConfirmSuccess() {
        confirmMailTextfield.resignFirstResponder()
        resetErrors(for: confirmMailTextfield)
    }

    func resetErrors(for textField: UITextField) {
        UIView.animate(withDuration: 0.15) {[weak self] in
            guard let self = self else { return }
            textField.backgroundColor = .white
            textField.textColor = .black
            switch textField {
            case self.emailTextfield: self.emailErrorLabel.isHidden = true
            case self.confirmMailTextfield: self.confirmMailErrorLabel.isHidden = true
            default: break
            }
        }
    }

    func setupNotification() {
        NotificationCenter.default.addObserver(self,
                                               selector: #selector(emailSend(notification:)),
                                               name: emailSent,
                                               object: nil)
    }

    @objc private func emailSend(notification: Notification) {
        if let error = notification.object as? Error {
            Console.log(type: .error, "Error Sending Email with Google: \(error.localizedDescription)")
            toastManager?.showToast(for: .resendEmailFailure)
        } else if let email = notification.object as? String {
            router?.route(to: .confirm(email))
        }
    }
}
