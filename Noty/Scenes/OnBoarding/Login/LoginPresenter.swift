//
//  LoginPresenter.swift
//  Noty
//
//  Created by Youssef Jdidi on 15/2/2021.
//  Copyright (c) 2021 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//
//  This template is meant to work with Swinject.

import UIKit

protocol LoginPresenterProtocol {
    func set(viewController: LoginViewControllerProtocol?)

    // add the functions that are called from interactor
    func handle(error: Error)
    func presentValidationSuccess(field: LoginModels.Validation)
    func presentValidationError(field: LoginModels.Validation, error: DataValidationError)
    func presentEmailCompletion(result: Result<Void, Error>)
}

class LoginPresenter: LoginPresenterProtocol {

    // MARK: DI
    weak var viewController: LoginViewControllerProtocol?

    func set(viewController: LoginViewControllerProtocol?) {
        self.viewController = viewController
    }
}

// MARK: Methods
extension  LoginPresenter {

    func handle(error: Error) {
        viewController?.display(error: error)
    }

    func presentValidationSuccess(field: LoginModels.Validation) {
        viewController?.displayValidationSuccess(field: field)
    }

    func presentValidationError(field: LoginModels.Validation, error: DataValidationError) {
        viewController?.displayValidationError(field: field, error: error)
    }

    func presentEmailCompletion(result: Result<Void, Error>) {
        viewController?.displaySendingEmail(result: result)
    }
}
