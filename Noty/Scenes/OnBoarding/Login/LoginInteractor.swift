//
//  LoginInteractor.swift
//  Noty
//
//  Created by Youssef Jdidi on 15/2/2021.
//  Copyright (c) 2021 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//
//  This template is meant to work with Swinject.

import UIKit
import GoogleSignIn

protocol LoginInteractorProtocol {
    func validateEmail(email: String)
    func validateConfirmMail(email: String, confirmEmail: String)
    func startSignIn(with email: String)
    func prepareGoogleSignIn()
    func startGoogeSignIn(on viewController: UIViewController)
}

class LoginInteractor: LoginInteractorProtocol {

    // MARK: DI
    var presenter: LoginPresenterProtocol
    private let dataValidator: DataValidatorProtocol
    private let authManager: AuthManagerProtocol

    init(
        presenter: LoginPresenterProtocol,
        dataValidator: DataValidatorProtocol,
        authManager: AuthManagerProtocol
    ) {
        self.presenter = presenter
        self.dataValidator = dataValidator
        self.authManager = authManager
    }

    func validateEmail(email: String) {
        do {
            try validateEmailField(email: email)
            presenter.presentValidationSuccess(field: .mail)
        } catch {
            guard let error = error as? DataValidationError else { return }
            presenter.presentValidationError(field: .mail, error: error)
        }
    }

    func validateConfirmMail(email: String, confirmEmail: String) {
        do {
            try validateConfirmField(email: email, confirmEmail: confirmEmail)
            presenter.presentValidationSuccess(field: .confirmMail)
        } catch {
            guard let error = error as? DataValidationError else { return }
            presenter.presentValidationError(field: .confirmMail, error: error)
        }
    }

    func startSignIn(with email: String) {
        authManager.signInWithEmail(email: email) {[weak self] result in
            guard let self = self else { return }
            self.presenter.presentEmailCompletion(result: result)
        }
    }

    func prepareGoogleSignIn() {
        authManager.prepareGoogleSignIn()
    }

    func startGoogeSignIn(on viewController: UIViewController) {
        GIDSignIn.sharedInstance()?.presentingViewController = viewController
        GIDSignIn.sharedInstance()?.signIn()
    }
}

fileprivate extension LoginInteractor {
    func validateEmailField(email: String?) throws {
        guard let email = email else { return }
        try dataValidator.validateEmail(email)
    }

    func validateConfirmField(email: String?, confirmEmail: String?) throws {
        guard let email = email, let confirmEmail = confirmEmail else { return }
        try dataValidator.validateEmail(email)
        try dataValidator.validateEmailMatch(email, confirmEmail)
    }
}
