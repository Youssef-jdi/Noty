//
//  TitleAlertViewController.swift
//  Noty
//
//  Created by Youssef Jdidi on 25/3/2021.
//  Copyright (c) 2021 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//
//  This template is meant to work with Swinject.

import UIKit

protocol TitleAlertViewControllerProtocol: class, UIViewControllerRouting {
    func set(interactor: TitleAlertInteractorProtocol)
    func set(router: TitleAlertRouterProtocol)
    func set(text note: String)
    func set(toastManager: ToastManagerProtocol)

    // add the functions that are called from the presenter
    func displaySaveResult(save result: Result<Storable?, Error>)
    func displayEmptyTitleError()
}

class TitleAlertViewController: UIViewController, TitleAlertViewControllerProtocol {

    // MARK: DI
    var interactor: TitleAlertInteractorProtocol?
    var router: TitleAlertRouterProtocol?

    func set(interactor: TitleAlertInteractorProtocol) {
        self.interactor = interactor
    }

    func set(router: TitleAlertRouterProtocol) {
        self.router = router
    }

    func set(text note: String) {
        self.note = note
    }

    func set(toastManager: ToastManagerProtocol) {
        self.toastManager = toastManager
    }
    
    // MARK: Outlets
    @IBOutlet weak var activityIndicator: UIActivityIndicatorView! {
        didSet {
            activityIndicator.isHidden = true
        }
    }
    @IBOutlet weak var titleTextField: AppTextField! {
        didSet {
            titleTextField.delegate = self
        }
    }
    @IBOutlet weak var saveButton: AppButton!

    // MARK: Properties
    var note: String?
    var toastManager: ToastManagerProtocol?

    // MARK: Lifecycle
    override func viewDidLoad() {
        super.viewDidLoad()
        setupTapToDismiss()
    }

    // MARK: Actions
    @IBAction func saveClicked(_ sender: Any) {
        guard let note = note else { return }
        interactor?.saveNote(with: note, and: titleTextField.text)
        activityIndicator.isHidden = false
        activityIndicator.startAnimating()
    }

    @IBAction func cancelClicked(_ sender: Any) {
        dismiss(animated: true, completion: nil)
    }
}

// MARK: Methods
extension TitleAlertViewController {

    func displaySaveResult(save result: Result<Storable?, Error>) {
        switch result {
        case .success: toastManager?.showToast(for: .noteSaved)
        case .failure: toastManager?.showToast(for: .cantSaveNote)
        }
        DispatchQueue.main.asyncAfter(deadline: .now() + 0.7) {[weak self] in
            guard let self = self else { return }
            self.activityIndicator.stopAnimating()
            self.dismiss(animated: true, completion: nil)
        }
    }

    func displayEmptyTitleError() {
        DispatchQueue.main.asyncAfter(deadline: .now() + 0.5) {[weak self] in
            guard let self = self else { return }
            self.activityIndicator.stopAnimating()
            self.activityIndicator.isHidden = true
            self.titleTextField.resignFirstResponder()
            self.titleTextField.shakeError()
            self.toastManager?.showToast(for: .emptyTitle)
        }
    }
}

extension TitleAlertViewController: UITextFieldDelegate {

    func textFieldDidBeginEditing(_ textField: UITextField) {
        UIView.animate(withDuration: 0.15) {[weak self] in
            guard let self = self else { return }
            self.titleTextField.backgroundColor = .white
            self.titleTextField.textColor = .black
        }
    }

    private func setupTapToDismiss() {
        view.addGestureRecognizer(UITapGestureRecognizer(target: self, action: #selector(tapToDismissKeyboard)))
    }

    @objc func tapToDismissKeyboard() {
        self.view.endEditing(true)
    }

    func textFieldShouldReturn(_ textField: UITextField) -> Bool {
        textField.resignFirstResponder()
        return false
    }
}
