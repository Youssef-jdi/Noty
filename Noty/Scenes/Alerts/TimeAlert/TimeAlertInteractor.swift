//
//  TimeAlertInteractor.swift
//  Noty
//
//  Created by Youssef Jdidi on 20/3/2021.
//  Copyright (c) 2021 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//
//  This template is meant to work with Swinject.

import UIKit

protocol TimeAlertInteractorProtocol {
    func convertDate(date: Date)
    func addNotif(on date: Date, with note: NoteModel)
    func handleThemeColor()
}

class TimeAlertInteractor: TimeAlertInteractorProtocol {

    // MARK: DI
    var presenter: TimeAlertPresenterProtocol
    var dateFormatter: DateFormatterProtocol
    var permissionManager: PermissionManagerProtocol
    var notificationManager: NotificationManagerProtocol
    var errorHandler: ErrorHandlerProtocol
    var userDefaults: UserDefaultsManagerProtocol
    var noteService: NoteServiceProtocol
    
    init(
        presenter: TimeAlertPresenterProtocol,
        dateFormatter: DateFormatterProtocol,
        permissionManager: PermissionManagerProtocol,
        notificationManager: NotificationManagerProtocol,
        errorHandler: ErrorHandlerProtocol,
        userDefaults: UserDefaultsManagerProtocol,
        noteService: NoteServiceProtocol
        ) {
        self.presenter = presenter
        self.dateFormatter = dateFormatter
        self.permissionManager = permissionManager
        self.notificationManager = notificationManager
        self.errorHandler = errorHandler
        self.userDefaults = userDefaults
        self.noteService = noteService
    }
}

extension TimeAlertInteractor {
    func handleThemeColor() {
        presenter.present(theme: userDefaults.themeColor)
    }

    func convertDate(date: Date) {
        presenter.present(time: dateFormatter.get(date: date, in: "h:mm a"))
    }

    func addNotif(on date: Date, with note: NoteModel) {
        requestNotifPermission {[weak self] in
            guard let self = self else { return }
            self.notificationManager.scheduleNotification(
                note: note, on: date) {[weak self] result in
                guard let self = self else { return }
                switch result {
                case .success: self.updateNote(on: note, with: date)
                case .failure(let error): self.errorHandler.handle(error)
                }
            }
        }
    }

    private func updateNote(on note: NoteModel, with date: Date) {
        noteService.updateNoteDate(from: note) { result in
            switch result {
            case .success(let storable):
                guard let note = storable as? Note else { return }
                let noteModel = NoteModel.map(from: note)
                Console.log(type: .success, "\(noteModel)")
                self.presenter.presentAddingNotif()
            case .failure(let error): self.errorHandler.handle(error)
            }
        }
    }

    private func requestNotifPermission(onCompletion: @escaping () -> Void) {
        permissionManager.requestNotificationPermission {[weak self] result in
            guard let self = self else { return }
            switch result {
            case .success: onCompletion()
            case .failure: self.presenter.present(permission: .notif)
            }
        }
    }
}
