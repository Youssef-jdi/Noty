//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap { Locale(identifier: $0) } ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)

  /// Find first language and bundle for which the table exists
  fileprivate static func localeBundle(tableName: String, preferredLanguages: [String]) -> (Foundation.Locale, Foundation.Bundle)? {
    // Filter preferredLanguages to localizations, use first locale
    var languages = preferredLanguages
      .map { Locale(identifier: $0) }
      .prefix(1)
      .flatMap { locale -> [String] in
        if hostingBundle.localizations.contains(locale.identifier) {
          if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
            return [locale.identifier, language]
          } else {
            return [locale.identifier]
          }
        } else if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
          return [language]
        } else {
          return []
        }
      }

    // If there's no languages, use development language as backstop
    if languages.isEmpty {
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages = [developmentLocalization]
      }
    } else {
      // Insert Base as second item (between locale identifier and languageCode)
      languages.insert("Base", at: 1)

      // Add development language as backstop
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages.append(developmentLocalization)
      }
    }

    // Find first language for which table exists
    // Note: key might not exist in chosen language (in that case, key will be shown)
    for language in languages {
      if let lproj = hostingBundle.url(forResource: language, withExtension: "lproj"),
         let lbundle = Bundle(url: lproj)
      {
        let strings = lbundle.url(forResource: tableName, withExtension: "strings")
        let stringsdict = lbundle.url(forResource: tableName, withExtension: "stringsdict")

        if strings != nil || stringsdict != nil {
          return (Locale(identifier: language), lbundle)
        }
      }
    }

    // If table is available in main bundle, don't look for localized resources
    let strings = hostingBundle.url(forResource: tableName, withExtension: "strings", subdirectory: nil, localization: nil)
    let stringsdict = hostingBundle.url(forResource: tableName, withExtension: "stringsdict", subdirectory: nil, localization: nil)

    if strings != nil || stringsdict != nil {
      return (applicationLocale, hostingBundle)
    }

    // If table is not found for requested languages, key will be shown
    return nil
  }

  /// Load string from Info.plist file
  fileprivate static func infoPlistString(path: [String], key: String) -> String? {
    var dict = hostingBundle.infoDictionary
    for step in path {
      guard let obj = dict?[step] as? [String: Any] else { return nil }
      dict = obj
    }
    return dict?[key] as? String
  }

  static func validate() throws {
    try intern.validate()
  }

  #if os(iOS) || os(tvOS)
  /// This `R.storyboard` struct is generated, and contains static references to 5 storyboards.
  struct storyboard {
    /// Storyboard `Alerts`.
    static let alerts = _R.storyboard.alerts()
    /// Storyboard `Home`.
    static let home = _R.storyboard.home()
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `OnBoarding`.
    static let onBoarding = _R.storyboard.onBoarding()
    /// Storyboard `SplashScreen`.
    static let splashScreen = _R.storyboard.splashScreen()

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Alerts", bundle: ...)`
    static func alerts(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.alerts)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Home", bundle: ...)`
    static func home(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.home)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "OnBoarding", bundle: ...)`
    static func onBoarding(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.onBoarding)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "SplashScreen", bundle: ...)`
    static func splashScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.splashScreen)
    }
    #endif

    fileprivate init() {}
  }
  #endif

  /// This `R.color` struct is generated, and contains static references to 10 colors.
  struct color {
    /// Color `PurcahseBlue`.
    static let purcahseBlue = Rswift.ColorResource(bundle: R.hostingBundle, name: "PurcahseBlue")
    /// Color `PurchaseGray`.
    static let purchaseGray = Rswift.ColorResource(bundle: R.hostingBundle, name: "PurchaseGray")
    /// Color `appLightRed`.
    static let appLightRed = Rswift.ColorResource(bundle: R.hostingBundle, name: "appLightRed")
    /// Color `facebookBlue`.
    static let facebookBlue = Rswift.ColorResource(bundle: R.hostingBundle, name: "facebookBlue")
    /// Color `googleBlue`.
    static let googleBlue = Rswift.ColorResource(bundle: R.hostingBundle, name: "googleBlue")
    /// Color `linkedinBlue`.
    static let linkedinBlue = Rswift.ColorResource(bundle: R.hostingBundle, name: "linkedinBlue")
    /// Color `playerGray`.
    static let playerGray = Rswift.ColorResource(bundle: R.hostingBundle, name: "playerGray")
    /// Color `vonoBlueDark`.
    static let vonoBlueDark = Rswift.ColorResource(bundle: R.hostingBundle, name: "vonoBlueDark")
    /// Color `vonoBlue`.
    static let vonoBlue = Rswift.ColorResource(bundle: R.hostingBundle, name: "vonoBlue")
    /// Color `vonoYellow`.
    static let vonoYellow = Rswift.ColorResource(bundle: R.hostingBundle, name: "vonoYellow")

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "PurcahseBlue", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func purcahseBlue(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.purcahseBlue, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "PurchaseGray", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func purchaseGray(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.purchaseGray, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "appLightRed", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func appLightRed(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.appLightRed, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "facebookBlue", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func facebookBlue(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.facebookBlue, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "googleBlue", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func googleBlue(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.googleBlue, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "linkedinBlue", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func linkedinBlue(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.linkedinBlue, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "playerGray", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func playerGray(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.playerGray, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "vonoBlue", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func vonoBlue(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.vonoBlue, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "vonoBlueDark", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func vonoBlueDark(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.vonoBlueDark, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "vonoYellow", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func vonoYellow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.vonoYellow, compatibleWith: traitCollection)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "PurcahseBlue", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func purcahseBlue(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.purcahseBlue.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "PurchaseGray", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func purchaseGray(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.purchaseGray.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "appLightRed", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func appLightRed(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.appLightRed.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "facebookBlue", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func facebookBlue(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.facebookBlue.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "googleBlue", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func googleBlue(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.googleBlue.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "linkedinBlue", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func linkedinBlue(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.linkedinBlue.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "playerGray", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func playerGray(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.playerGray.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "vonoBlue", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func vonoBlue(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.vonoBlue.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "vonoBlueDark", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func vonoBlueDark(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.vonoBlueDark.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "vonoYellow", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func vonoYellow(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.vonoYellow.name)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.entitlements` struct is generated, and contains static references to 1 properties.
  struct entitlements {
    struct comAppleDeveloperAssociatedDomains {
      static let applinksNotysPageLink = infoPlistString(path: ["com.apple.developer.associated-domains"], key: "applinks:notys.page.link") ?? "applinks:notys.page.link"

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  /// This `R.file` struct is generated, and contains static references to 4 files.
  struct file {
    /// Resource file `Cow.mp3`.
    static let cowMp3 = Rswift.FileResource(bundle: R.hostingBundle, name: "Cow", pathExtension: "mp3")
    /// Resource file `GoogleService-Info.plist`.
    static let googleServiceInfoPlist = Rswift.FileResource(bundle: R.hostingBundle, name: "GoogleService-Info", pathExtension: "plist")
    /// Resource file `Naughty.mp3`.
    static let naughtyMp3 = Rswift.FileResource(bundle: R.hostingBundle, name: "Naughty", pathExtension: "mp3")
    /// Resource file `SplashAnimation.json`.
    static let splashAnimationJson = Rswift.FileResource(bundle: R.hostingBundle, name: "SplashAnimation", pathExtension: "json")

    /// `bundle.url(forResource: "Cow", withExtension: "mp3")`
    static func cowMp3(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.cowMp3
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "GoogleService-Info", withExtension: "plist")`
    static func googleServiceInfoPlist(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.googleServiceInfoPlist
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Naughty", withExtension: "mp3")`
    static func naughtyMp3(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.naughtyMp3
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "SplashAnimation", withExtension: "json")`
    static func splashAnimationJson(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.splashAnimationJson
      return fileResource.bundle.url(forResource: fileResource)
    }

    fileprivate init() {}
  }

  /// This `R.id` struct is generated, and contains static references to accessibility identifiers.
  struct id {
    struct onBoarding {
      /// Accessibility identifier `confirmButton`.
      static let confirmButton: String = "confirmButton"

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  /// This `R.image` struct is generated, and contains static references to 101 images.
  struct image {
    /// Image `Arrow_icon_black`.
    static let arrow_icon_black = Rswift.ImageResource(bundle: R.hostingBundle, name: "Arrow_icon_black")
    /// Image `Arrow_icon_white`.
    static let arrow_icon_white = Rswift.ImageResource(bundle: R.hostingBundle, name: "Arrow_icon_white")
    /// Image `Camera toolbar`.
    static let cameraToolbar = Rswift.ImageResource(bundle: R.hostingBundle, name: "Camera toolbar")
    /// Image `Camera_icon_transparent`.
    static let camera_icon_transparent = Rswift.ImageResource(bundle: R.hostingBundle, name: "Camera_icon_transparent")
    /// Image `Camera_icon_white`.
    static let camera_icon_white = Rswift.ImageResource(bundle: R.hostingBundle, name: "Camera_icon_white")
    /// Image `Delete_ic_grey`.
    static let delete_ic_grey = Rswift.ImageResource(bundle: R.hostingBundle, name: "Delete_ic_grey")
    /// Image `Delete_ic_white`.
    static let delete_ic_white = Rswift.ImageResource(bundle: R.hostingBundle, name: "Delete_ic_white")
    /// Image `Delete_icon`.
    static let delete_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "Delete_icon")
    /// Image `Email_icon`.
    static let email_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "Email_icon")
    /// Image `Feedback emoji: bad`.
    static let feedbackEmojiBad = Rswift.ImageResource(bundle: R.hostingBundle, name: "Feedback emoji: bad")
    /// Image `Feedback emoji: good`.
    static let feedbackEmojiGood = Rswift.ImageResource(bundle: R.hostingBundle, name: "Feedback emoji: good")
    /// Image `Feedback emoji: great`.
    static let feedbackEmojiGreat = Rswift.ImageResource(bundle: R.hostingBundle, name: "Feedback emoji: great")
    /// Image `Feedback emoji: not well`.
    static let feedbackEmojiNotWell = Rswift.ImageResource(bundle: R.hostingBundle, name: "Feedback emoji: not well")
    /// Image `Feedback emoji: sad`.
    static let feedbackEmojiSad = Rswift.ImageResource(bundle: R.hostingBundle, name: "Feedback emoji: sad")
    /// Image `Flash_icon`.
    static let flash_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "Flash_icon")
    /// Image `Info_icon_blue`.
    static let info_icon_blue = Rswift.ImageResource(bundle: R.hostingBundle, name: "Info_icon_blue")
    /// Image `Info_icon_white`.
    static let info_icon_white = Rswift.ImageResource(bundle: R.hostingBundle, name: "Info_icon_white")
    /// Image `More_icon`.
    static let more_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "More_icon")
    /// Image `No_flash_icon`.
    static let no_flash_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "No_flash_icon")
    /// Image `Pause_icon`.
    static let pause_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "Pause_icon")
    /// Image `Play_icon`.
    static let play_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "Play_icon")
    /// Image `Queue_icon`.
    static let queue_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "Queue_icon")
    /// Image `Send memo`.
    static let sendMemo = Rswift.ImageResource(bundle: R.hostingBundle, name: "Send memo")
    /// Image `Settings_icon`.
    static let settings_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "Settings_icon")
    /// Image `Share_icon`.
    static let share_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "Share_icon")
    /// Image `Smiley-Email address`.
    static let smileyEmailAddress = Rswift.ImageResource(bundle: R.hostingBundle, name: "Smiley-Email address")
    /// Image `Smiley-Invite`.
    static let smileyInvite = Rswift.ImageResource(bundle: R.hostingBundle, name: "Smiley-Invite")
    /// Image `Smiley-List`.
    static let smileyList = Rswift.ImageResource(bundle: R.hostingBundle, name: "Smiley-List")
    /// Image `Smiley`.
    static let smiley = Rswift.ImageResource(bundle: R.hostingBundle, name: "Smiley")
    /// Image `Switch camera icon`.
    static let switchCameraIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "Switch camera icon")
    /// Image `Switch_camera_icon`.
    static let switch_camera_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "Switch_camera_icon")
    /// Image `Text memo (queue)`.
    static let textMemoQueue = Rswift.ImageResource(bundle: R.hostingBundle, name: "Text memo (queue)")
    /// Image `Text memo icon`.
    static let textMemoIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "Text memo icon")
    /// Image `Text memo white`.
    static let textMemoWhite = Rswift.ImageResource(bundle: R.hostingBundle, name: "Text memo white")
    /// Image `Text_memo_icon_transparent`.
    static let text_memo_icon_transparent = Rswift.ImageResource(bundle: R.hostingBundle, name: "Text_memo_icon_transparent")
    /// Image `Video_recording_icon`.
    static let video_recording_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "Video_recording_icon")
    /// Image `VoNo Pro user`.
    static let voNoProUser = Rswift.ImageResource(bundle: R.hostingBundle, name: "VoNo Pro user")
    /// Image `Voice memo - transparent`.
    static let voiceMemoTransparent = Rswift.ImageResource(bundle: R.hostingBundle, name: "Voice memo - transparent")
    /// Image `Voice memo`.
    static let voiceMemo = Rswift.ImageResource(bundle: R.hostingBundle, name: "Voice memo")
    /// Image `Voice to text - transparent`.
    static let voiceToTextTransparent = Rswift.ImageResource(bundle: R.hostingBundle, name: "Voice to text - transparent")
    /// Image `Voice to text white`.
    static let voiceToTextWhite = Rswift.ImageResource(bundle: R.hostingBundle, name: "Voice to text white")
    /// Image `Voice_memo_icon_transparent`.
    static let voice_memo_icon_transparent = Rswift.ImageResource(bundle: R.hostingBundle, name: "Voice_memo_icon_transparent")
    /// Image `Voice_to_text_icon_transparent`.
    static let voice_to_text_icon_transparent = Rswift.ImageResource(bundle: R.hostingBundle, name: "Voice_to_text_icon_transparent")
    /// Image `Volume_icon`.
    static let volume_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "Volume_icon")
    /// Image `add_ic`.
    static let add_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "add_ic")
    /// Image `arrow_icon_down`.
    static let arrow_icon_down = Rswift.ImageResource(bundle: R.hostingBundle, name: "arrow_icon_down")
    /// Image `baseline-arrow_back-24px`.
    static let baselineArrow_back24px = Rswift.ImageResource(bundle: R.hostingBundle, name: "baseline-arrow_back-24px")
    /// Image `baseline-keyboard_arrow_down-24px copy 3`.
    static let baselineKeyboard_arrow_down24pxCopy3 = Rswift.ImageResource(bundle: R.hostingBundle, name: "baseline-keyboard_arrow_down-24px copy 3")
    /// Image `check_ic`.
    static let check_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "check_ic")
    /// Image `clear_button`.
    static let clear_button = Rswift.ImageResource(bundle: R.hostingBundle, name: "clear_button")
    /// Image `close_ic`.
    static let close_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "close_ic")
    /// Image `confirm`.
    static let confirm = Rswift.ImageResource(bundle: R.hostingBundle, name: "confirm")
    /// Image `emptyImage`.
    static let emptyImage = Rswift.ImageResource(bundle: R.hostingBundle, name: "emptyImage")
    /// Image `heart_filled`.
    static let heart_filled = Rswift.ImageResource(bundle: R.hostingBundle, name: "heart_filled")
    /// Image `heart`.
    static let heart = Rswift.ImageResource(bundle: R.hostingBundle, name: "heart")
    /// Image `ic_Feedback_1`.
    static let ic_Feedback_1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_Feedback_1")
    /// Image `ic_Feedback_2`.
    static let ic_Feedback_2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_Feedback_2")
    /// Image `ic_Feedback_3`.
    static let ic_Feedback_3 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_Feedback_3")
    /// Image `ic_Feedback_4`.
    static let ic_Feedback_4 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_Feedback_4")
    /// Image `ic_Feedback_5`.
    static let ic_Feedback_5 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_Feedback_5")
    /// Image `ic_add_blue`.
    static let ic_add_blue = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_add_blue")
    /// Image `ic_add_grey`.
    static let ic_add_grey = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_add_grey")
    /// Image `ic_add_white`.
    static let ic_add_white = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_add_white")
    /// Image `ic_alert_blue`.
    static let ic_alert_blue = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_alert_blue")
    /// Image `ic_alert_green`.
    static let ic_alert_green = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_alert_green")
    /// Image `ic_alert_group_2`.
    static let ic_alert_group_2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_alert_group_2")
    /// Image `ic_alert_group`.
    static let ic_alert_group = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_alert_group")
    /// Image `ic_arrow_back_gray`.
    static let ic_arrow_back_gray = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_arrow_back_gray")
    /// Image `ic_arrow_back_white`.
    static let ic_arrow_back_white = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_arrow_back_white")
    /// Image `ic_arrow_down_sharp_black`.
    static let ic_arrow_down_sharp_black = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_arrow_down_sharp_black")
    /// Image `ic_arrow_right_grey`.
    static let ic_arrow_right_grey = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_arrow_right_grey")
    /// Image `ic_attention_white`.
    static let ic_attention_white = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_attention_white")
    /// Image `ic_capture_photo`.
    static let ic_capture_photo = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_capture_photo")
    /// Image `ic_checkmark_green`.
    static let ic_checkmark_green = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_checkmark_green")
    /// Image `ic_close_grey`.
    static let ic_close_grey = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_close_grey")
    /// Image `ic_close_white_group`.
    static let ic_close_white_group = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_close_white_group")
    /// Image `ic_close_white`.
    static let ic_close_white = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_close_white")
    /// Image `ic_delete_option`.
    static let ic_delete_option = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_delete_option")
    /// Image `ic_email`.
    static let ic_email = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_email")
    /// Image `ic_filter`.
    static let ic_filter = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_filter")
    /// Image `ic_heart`.
    static let ic_heart = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_heart")
    /// Image `ic_mic`.
    static let ic_mic = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_mic")
    /// Image `ic_microphone_black_big`.
    static let ic_microphone_black_big = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_microphone_black_big")
    /// Image `ic_more_grey`.
    static let ic_more_grey = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_more_grey")
    /// Image `ic_nav_bar_sync_white`.
    static let ic_nav_bar_sync_white = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_nav_bar_sync_white")
    /// Image `ic_pause_grey_small_big`.
    static let ic_pause_grey_small_big = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_pause_grey_small_big")
    /// Image `ic_plus`.
    static let ic_plus = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_plus")
    /// Image `ic_resync_option`.
    static let ic_resync_option = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_resync_option")
    /// Image `ic_share_option`.
    static let ic_share_option = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_share_option")
    /// Image `ic_smiley_email`.
    static let ic_smiley_email = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_smiley_email")
    /// Image `ic_smiley_lock`.
    static let ic_smiley_lock = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_smiley_lock")
    /// Image `ic_smiley_reminders`.
    static let ic_smiley_reminders = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_smiley_reminders")
    /// Image `ic_smiley_sent`.
    static let ic_smiley_sent = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_smiley_sent")
    /// Image `ic_smiley`.
    static let ic_smiley = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_smiley")
    /// Image `ic_vtt_black`.
    static let ic_vtt_black = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_vtt_black")
    /// Image `icon_lng`.
    static let icon_lng = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_lng")
    /// Image `logo_DTT`.
    static let logo_DTT = Rswift.ImageResource(bundle: R.hostingBundle, name: "logo_DTT")
    /// Image `smiley - logo`.
    static let smileyLogo = Rswift.ImageResource(bundle: R.hostingBundle, name: "smiley - logo")
    /// Image `smiley - time`.
    static let smileyTime = Rswift.ImageResource(bundle: R.hostingBundle, name: "smiley - time")
    /// Image `switch off`.
    static let switchOff = Rswift.ImageResource(bundle: R.hostingBundle, name: "switch off")
    /// Image `switch on`.
    static let switchOn = Rswift.ImageResource(bundle: R.hostingBundle, name: "switch on")

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Arrow_icon_black", bundle: ..., traitCollection: ...)`
    static func arrow_icon_black(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.arrow_icon_black, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Arrow_icon_white", bundle: ..., traitCollection: ...)`
    static func arrow_icon_white(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.arrow_icon_white, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Camera toolbar", bundle: ..., traitCollection: ...)`
    static func cameraToolbar(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cameraToolbar, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Camera_icon_transparent", bundle: ..., traitCollection: ...)`
    static func camera_icon_transparent(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.camera_icon_transparent, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Camera_icon_white", bundle: ..., traitCollection: ...)`
    static func camera_icon_white(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.camera_icon_white, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Delete_ic_grey", bundle: ..., traitCollection: ...)`
    static func delete_ic_grey(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.delete_ic_grey, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Delete_ic_white", bundle: ..., traitCollection: ...)`
    static func delete_ic_white(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.delete_ic_white, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Delete_icon", bundle: ..., traitCollection: ...)`
    static func delete_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.delete_icon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Email_icon", bundle: ..., traitCollection: ...)`
    static func email_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.email_icon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Feedback emoji: bad", bundle: ..., traitCollection: ...)`
    static func feedbackEmojiBad(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.feedbackEmojiBad, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Feedback emoji: good", bundle: ..., traitCollection: ...)`
    static func feedbackEmojiGood(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.feedbackEmojiGood, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Feedback emoji: great", bundle: ..., traitCollection: ...)`
    static func feedbackEmojiGreat(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.feedbackEmojiGreat, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Feedback emoji: not well", bundle: ..., traitCollection: ...)`
    static func feedbackEmojiNotWell(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.feedbackEmojiNotWell, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Feedback emoji: sad", bundle: ..., traitCollection: ...)`
    static func feedbackEmojiSad(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.feedbackEmojiSad, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Flash_icon", bundle: ..., traitCollection: ...)`
    static func flash_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.flash_icon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Info_icon_blue", bundle: ..., traitCollection: ...)`
    static func info_icon_blue(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.info_icon_blue, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Info_icon_white", bundle: ..., traitCollection: ...)`
    static func info_icon_white(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.info_icon_white, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "More_icon", bundle: ..., traitCollection: ...)`
    static func more_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.more_icon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "No_flash_icon", bundle: ..., traitCollection: ...)`
    static func no_flash_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.no_flash_icon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Pause_icon", bundle: ..., traitCollection: ...)`
    static func pause_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.pause_icon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Play_icon", bundle: ..., traitCollection: ...)`
    static func play_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.play_icon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Queue_icon", bundle: ..., traitCollection: ...)`
    static func queue_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.queue_icon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Send memo", bundle: ..., traitCollection: ...)`
    static func sendMemo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.sendMemo, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Settings_icon", bundle: ..., traitCollection: ...)`
    static func settings_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.settings_icon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Share_icon", bundle: ..., traitCollection: ...)`
    static func share_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.share_icon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Smiley", bundle: ..., traitCollection: ...)`
    static func smiley(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.smiley, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Smiley-Email address", bundle: ..., traitCollection: ...)`
    static func smileyEmailAddress(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.smileyEmailAddress, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Smiley-Invite", bundle: ..., traitCollection: ...)`
    static func smileyInvite(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.smileyInvite, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Smiley-List", bundle: ..., traitCollection: ...)`
    static func smileyList(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.smileyList, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Switch camera icon", bundle: ..., traitCollection: ...)`
    static func switchCameraIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.switchCameraIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Switch_camera_icon", bundle: ..., traitCollection: ...)`
    static func switch_camera_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.switch_camera_icon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Text memo (queue)", bundle: ..., traitCollection: ...)`
    static func textMemoQueue(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.textMemoQueue, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Text memo icon", bundle: ..., traitCollection: ...)`
    static func textMemoIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.textMemoIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Text memo white", bundle: ..., traitCollection: ...)`
    static func textMemoWhite(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.textMemoWhite, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Text_memo_icon_transparent", bundle: ..., traitCollection: ...)`
    static func text_memo_icon_transparent(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.text_memo_icon_transparent, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Video_recording_icon", bundle: ..., traitCollection: ...)`
    static func video_recording_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.video_recording_icon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "VoNo Pro user", bundle: ..., traitCollection: ...)`
    static func voNoProUser(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.voNoProUser, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Voice memo - transparent", bundle: ..., traitCollection: ...)`
    static func voiceMemoTransparent(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.voiceMemoTransparent, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Voice memo", bundle: ..., traitCollection: ...)`
    static func voiceMemo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.voiceMemo, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Voice to text - transparent", bundle: ..., traitCollection: ...)`
    static func voiceToTextTransparent(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.voiceToTextTransparent, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Voice to text white", bundle: ..., traitCollection: ...)`
    static func voiceToTextWhite(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.voiceToTextWhite, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Voice_memo_icon_transparent", bundle: ..., traitCollection: ...)`
    static func voice_memo_icon_transparent(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.voice_memo_icon_transparent, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Voice_to_text_icon_transparent", bundle: ..., traitCollection: ...)`
    static func voice_to_text_icon_transparent(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.voice_to_text_icon_transparent, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Volume_icon", bundle: ..., traitCollection: ...)`
    static func volume_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.volume_icon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "add_ic", bundle: ..., traitCollection: ...)`
    static func add_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.add_ic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "arrow_icon_down", bundle: ..., traitCollection: ...)`
    static func arrow_icon_down(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.arrow_icon_down, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "baseline-arrow_back-24px", bundle: ..., traitCollection: ...)`
    static func baselineArrow_back24px(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.baselineArrow_back24px, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "baseline-keyboard_arrow_down-24px copy 3", bundle: ..., traitCollection: ...)`
    static func baselineKeyboard_arrow_down24pxCopy3(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.baselineKeyboard_arrow_down24pxCopy3, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "check_ic", bundle: ..., traitCollection: ...)`
    static func check_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.check_ic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "clear_button", bundle: ..., traitCollection: ...)`
    static func clear_button(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.clear_button, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "close_ic", bundle: ..., traitCollection: ...)`
    static func close_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.close_ic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "confirm", bundle: ..., traitCollection: ...)`
    static func confirm(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.confirm, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "emptyImage", bundle: ..., traitCollection: ...)`
    static func emptyImage(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.emptyImage, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "heart", bundle: ..., traitCollection: ...)`
    static func heart(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.heart, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "heart_filled", bundle: ..., traitCollection: ...)`
    static func heart_filled(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.heart_filled, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_Feedback_1", bundle: ..., traitCollection: ...)`
    static func ic_Feedback_1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_Feedback_1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_Feedback_2", bundle: ..., traitCollection: ...)`
    static func ic_Feedback_2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_Feedback_2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_Feedback_3", bundle: ..., traitCollection: ...)`
    static func ic_Feedback_3(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_Feedback_3, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_Feedback_4", bundle: ..., traitCollection: ...)`
    static func ic_Feedback_4(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_Feedback_4, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_Feedback_5", bundle: ..., traitCollection: ...)`
    static func ic_Feedback_5(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_Feedback_5, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_add_blue", bundle: ..., traitCollection: ...)`
    static func ic_add_blue(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_add_blue, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_add_grey", bundle: ..., traitCollection: ...)`
    static func ic_add_grey(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_add_grey, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_add_white", bundle: ..., traitCollection: ...)`
    static func ic_add_white(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_add_white, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_alert_blue", bundle: ..., traitCollection: ...)`
    static func ic_alert_blue(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_alert_blue, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_alert_green", bundle: ..., traitCollection: ...)`
    static func ic_alert_green(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_alert_green, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_alert_group", bundle: ..., traitCollection: ...)`
    static func ic_alert_group(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_alert_group, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_alert_group_2", bundle: ..., traitCollection: ...)`
    static func ic_alert_group_2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_alert_group_2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_arrow_back_gray", bundle: ..., traitCollection: ...)`
    static func ic_arrow_back_gray(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_arrow_back_gray, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_arrow_back_white", bundle: ..., traitCollection: ...)`
    static func ic_arrow_back_white(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_arrow_back_white, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_arrow_down_sharp_black", bundle: ..., traitCollection: ...)`
    static func ic_arrow_down_sharp_black(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_arrow_down_sharp_black, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_arrow_right_grey", bundle: ..., traitCollection: ...)`
    static func ic_arrow_right_grey(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_arrow_right_grey, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_attention_white", bundle: ..., traitCollection: ...)`
    static func ic_attention_white(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_attention_white, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_capture_photo", bundle: ..., traitCollection: ...)`
    static func ic_capture_photo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_capture_photo, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_checkmark_green", bundle: ..., traitCollection: ...)`
    static func ic_checkmark_green(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_checkmark_green, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_close_grey", bundle: ..., traitCollection: ...)`
    static func ic_close_grey(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_close_grey, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_close_white", bundle: ..., traitCollection: ...)`
    static func ic_close_white(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_close_white, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_close_white_group", bundle: ..., traitCollection: ...)`
    static func ic_close_white_group(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_close_white_group, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_delete_option", bundle: ..., traitCollection: ...)`
    static func ic_delete_option(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_delete_option, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_email", bundle: ..., traitCollection: ...)`
    static func ic_email(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_email, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_filter", bundle: ..., traitCollection: ...)`
    static func ic_filter(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_filter, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_heart", bundle: ..., traitCollection: ...)`
    static func ic_heart(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_heart, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_mic", bundle: ..., traitCollection: ...)`
    static func ic_mic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_mic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_microphone_black_big", bundle: ..., traitCollection: ...)`
    static func ic_microphone_black_big(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_microphone_black_big, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_more_grey", bundle: ..., traitCollection: ...)`
    static func ic_more_grey(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_more_grey, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_nav_bar_sync_white", bundle: ..., traitCollection: ...)`
    static func ic_nav_bar_sync_white(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_nav_bar_sync_white, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_pause_grey_small_big", bundle: ..., traitCollection: ...)`
    static func ic_pause_grey_small_big(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_pause_grey_small_big, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_plus", bundle: ..., traitCollection: ...)`
    static func ic_plus(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_plus, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_resync_option", bundle: ..., traitCollection: ...)`
    static func ic_resync_option(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_resync_option, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_share_option", bundle: ..., traitCollection: ...)`
    static func ic_share_option(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_share_option, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_smiley", bundle: ..., traitCollection: ...)`
    static func ic_smiley(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_smiley, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_smiley_email", bundle: ..., traitCollection: ...)`
    static func ic_smiley_email(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_smiley_email, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_smiley_lock", bundle: ..., traitCollection: ...)`
    static func ic_smiley_lock(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_smiley_lock, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_smiley_reminders", bundle: ..., traitCollection: ...)`
    static func ic_smiley_reminders(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_smiley_reminders, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_smiley_sent", bundle: ..., traitCollection: ...)`
    static func ic_smiley_sent(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_smiley_sent, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_vtt_black", bundle: ..., traitCollection: ...)`
    static func ic_vtt_black(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_vtt_black, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_lng", bundle: ..., traitCollection: ...)`
    static func icon_lng(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_lng, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "logo_DTT", bundle: ..., traitCollection: ...)`
    static func logo_DTT(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.logo_DTT, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "smiley - logo", bundle: ..., traitCollection: ...)`
    static func smileyLogo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.smileyLogo, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "smiley - time", bundle: ..., traitCollection: ...)`
    static func smileyTime(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.smileyTime, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "switch off", bundle: ..., traitCollection: ...)`
    static func switchOff(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.switchOff, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "switch on", bundle: ..., traitCollection: ...)`
    static func switchOn(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.switchOn, compatibleWith: traitCollection)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.nib` struct is generated, and contains static references to 5 nibs.
  struct nib {
    /// Nib `ConfigCell`.
    static let configCell = _R.nib._ConfigCell()
    /// Nib `EmptyBackgroundView`.
    static let emptyBackgroundView = _R.nib._EmptyBackgroundView()
    /// Nib `NoteCell`.
    static let noteCell = _R.nib._NoteCell()
    /// Nib `RootTabView`.
    static let rootTabView = _R.nib._RootTabView()
    /// Nib `Toast`.
    static let toast = _R.nib._Toast()

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "ConfigCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.configCell) instead")
    static func configCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.configCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "EmptyBackgroundView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.emptyBackgroundView) instead")
    static func emptyBackgroundView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.emptyBackgroundView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "NoteCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.noteCell) instead")
    static func noteCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.noteCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "RootTabView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.rootTabView) instead")
    static func rootTabView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.rootTabView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "Toast", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.toast) instead")
    static func toast(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.toast)
    }
    #endif

    static func configCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ConfigCell? {
      return R.nib.configCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ConfigCell
    }

    static func emptyBackgroundView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.emptyBackgroundView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func noteCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> NoteCell? {
      return R.nib.noteCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? NoteCell
    }

    static func rootTabView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.rootTabView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func toast(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> RoundedView? {
      return R.nib.toast.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? RoundedView
    }

    fileprivate init() {}
  }

  /// This `R.reuseIdentifier` struct is generated, and contains static references to 2 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `configCell`.
    static let configCell: Rswift.ReuseIdentifier<ConfigCell> = Rswift.ReuseIdentifier(identifier: "configCell")
    /// Reuse identifier `noteCell`.
    static let noteCell: Rswift.ReuseIdentifier<NoteCell> = Rswift.ReuseIdentifier(identifier: "noteCell")

    fileprivate init() {}
  }

  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }

    fileprivate init() {}
  }

  fileprivate class Class {}

  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    #if os(iOS) || os(tvOS)
    try nib.validate()
    #endif
    #if os(iOS) || os(tvOS)
    try storyboard.validate()
    #endif
  }

  #if os(iOS) || os(tvOS)
  struct nib: Rswift.Validatable {
    static func validate() throws {
      try _ConfigCell.validate()
      try _EmptyBackgroundView.validate()
      try _Toast.validate()
    }

    struct _ConfigCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = ConfigCell

      let bundle = R.hostingBundle
      let identifier = "configCell"
      let name = "ConfigCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ConfigCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ConfigCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "Arrow_icon_black", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Arrow_icon_black' is used in nib 'ConfigCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _EmptyBackgroundView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "EmptyBackgroundView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "emptyImage", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'emptyImage' is used in nib 'EmptyBackgroundView', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "vonoBlue", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'vonoBlue' is used in nib 'EmptyBackgroundView', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _NoteCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = NoteCell

      let bundle = R.hostingBundle
      let identifier = "noteCell"
      let name = "NoteCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> NoteCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? NoteCell
      }

      fileprivate init() {}
    }

    struct _RootTabView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "RootTabView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _Toast: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "Toast"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> RoundedView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? RoundedView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "ic_attention_white", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_attention_white' is used in nib 'Toast', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "vonoBlueDark", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'vonoBlueDark' is used in nib 'Toast', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }
  #endif

  #if os(iOS) || os(tvOS)
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      #if os(iOS) || os(tvOS)
      try alerts.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try home.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try launchScreen.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try onBoarding.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try splashScreen.validate()
      #endif
    }

    #if os(iOS) || os(tvOS)
    struct alerts: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let dateAlertViewController = StoryboardViewControllerResource<DateAlertViewController>(identifier: "DateAlertViewController")
      let languageAlertViewController = StoryboardViewControllerResource<LanguageAlertViewController>(identifier: "LanguageAlertViewController")
      let name = "Alerts"
      let timeAlertViewController = StoryboardViewControllerResource<TimeAlertViewController>(identifier: "TimeAlertViewController")
      let titleAlertViewController = StoryboardViewControllerResource<TitleAlertViewController>(identifier: "TitleAlertViewController")

      func dateAlertViewController(_: Void = ()) -> DateAlertViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: dateAlertViewController)
      }

      func languageAlertViewController(_: Void = ()) -> LanguageAlertViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: languageAlertViewController)
      }

      func timeAlertViewController(_: Void = ()) -> TimeAlertViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: timeAlertViewController)
      }

      func titleAlertViewController(_: Void = ()) -> TitleAlertViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: titleAlertViewController)
      }

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "vonoBlue", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'vonoBlue' is used in storyboard 'Alerts', but couldn't be loaded.") }
          if UIKit.UIColor(named: "vonoBlueDark", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'vonoBlueDark' is used in storyboard 'Alerts', but couldn't be loaded.") }
        }
        if _R.storyboard.alerts().dateAlertViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'dateAlertViewController' could not be loaded from storyboard 'Alerts' as 'DateAlertViewController'.") }
        if _R.storyboard.alerts().languageAlertViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'languageAlertViewController' could not be loaded from storyboard 'Alerts' as 'LanguageAlertViewController'.") }
        if _R.storyboard.alerts().timeAlertViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'timeAlertViewController' could not be loaded from storyboard 'Alerts' as 'TimeAlertViewController'.") }
        if _R.storyboard.alerts().titleAlertViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'titleAlertViewController' could not be loaded from storyboard 'Alerts' as 'TitleAlertViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct home: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = HomeNavigationController

      let bundle = R.hostingBundle
      let homeViewController = StoryboardViewControllerResource<HomeViewController>(identifier: "HomeViewController")
      let name = "Home"
      let notysViewController = StoryboardViewControllerResource<NotysViewController>(identifier: "NotysViewController")
      let rootViewController = StoryboardViewControllerResource<RootViewController>(identifier: "RootViewController")
      let settingsViewController = StoryboardViewControllerResource<SettingsViewController>(identifier: "SettingsViewController")
      let tutorialViewController = StoryboardViewControllerResource<TutorialViewController>(identifier: "TutorialViewController")

      func homeViewController(_: Void = ()) -> HomeViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: homeViewController)
      }

      func notysViewController(_: Void = ()) -> NotysViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: notysViewController)
      }

      func rootViewController(_: Void = ()) -> RootViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: rootViewController)
      }

      func settingsViewController(_: Void = ()) -> SettingsViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: settingsViewController)
      }

      func tutorialViewController(_: Void = ()) -> TutorialViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: tutorialViewController)
      }

      static func validate() throws {
        if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "hand.tap") == nil { throw Rswift.ValidationError(description: "[R.swift] System image named 'hand.tap' is used in storyboard 'Home', but couldn't be loaded.") } }
        if UIKit.UIImage(named: "ic_add_white", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_add_white' is used in storyboard 'Home', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_arrow_back_white", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_arrow_back_white' is used in storyboard 'Home', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_close_white", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_close_white' is used in storyboard 'Home', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_microphone_black_big", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_microphone_black_big' is used in storyboard 'Home', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_pause_grey_small_big", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_pause_grey_small_big' is used in storyboard 'Home', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "ApplicationBlack", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'ApplicationBlack' is used in storyboard 'Home', but couldn't be loaded.") }
          if UIKit.UIColor(named: "vonoBlue", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'vonoBlue' is used in storyboard 'Home', but couldn't be loaded.") }
          if UIKit.UIColor(named: "vonoBlueDark", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'vonoBlueDark' is used in storyboard 'Home', but couldn't be loaded.") }
        }
        if _R.storyboard.home().homeViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'homeViewController' could not be loaded from storyboard 'Home' as 'HomeViewController'.") }
        if _R.storyboard.home().notysViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'notysViewController' could not be loaded from storyboard 'Home' as 'NotysViewController'.") }
        if _R.storyboard.home().rootViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'rootViewController' could not be loaded from storyboard 'Home' as 'RootViewController'.") }
        if _R.storyboard.home().settingsViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'settingsViewController' could not be loaded from storyboard 'Home' as 'SettingsViewController'.") }
        if _R.storyboard.home().tutorialViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'tutorialViewController' could not be loaded from storyboard 'Home' as 'TutorialViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController

      let bundle = R.hostingBundle
      let name = "LaunchScreen"

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct onBoarding: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UINavigationController

      let bundle = R.hostingBundle
      let confirmViewController = StoryboardViewControllerResource<ConfirmViewController>(identifier: "ConfirmViewController")
      let languageViewController = StoryboardViewControllerResource<LanguageViewController>(identifier: "LanguageViewController")
      let loginViewController = StoryboardViewControllerResource<LoginViewController>(identifier: "LoginViewController")
      let name = "OnBoarding"
      let permissionViewController = StoryboardViewControllerResource<PermissionViewController>(identifier: "PermissionViewController")
      let welcomeViewController = StoryboardViewControllerResource<WelcomeViewController>(identifier: "WelcomeViewController")

      func confirmViewController(_: Void = ()) -> ConfirmViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: confirmViewController)
      }

      func languageViewController(_: Void = ()) -> LanguageViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: languageViewController)
      }

      func loginViewController(_: Void = ()) -> LoginViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: loginViewController)
      }

      func permissionViewController(_: Void = ()) -> PermissionViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: permissionViewController)
      }

      func welcomeViewController(_: Void = ()) -> WelcomeViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: welcomeViewController)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "confirm", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'confirm' is used in storyboard 'OnBoarding', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_arrow_back_gray", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_arrow_back_gray' is used in storyboard 'OnBoarding', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_google", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_google' is used in storyboard 'OnBoarding', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_smiley", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_smiley' is used in storyboard 'OnBoarding', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_smiley_email", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_smiley_email' is used in storyboard 'OnBoarding', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "appLightRed", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'appLightRed' is used in storyboard 'OnBoarding', but couldn't be loaded.") }
          if UIKit.UIColor(named: "vonoBlueDark", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'vonoBlueDark' is used in storyboard 'OnBoarding', but couldn't be loaded.") }
        }
        if _R.storyboard.onBoarding().confirmViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'confirmViewController' could not be loaded from storyboard 'OnBoarding' as 'ConfirmViewController'.") }
        if _R.storyboard.onBoarding().languageViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'languageViewController' could not be loaded from storyboard 'OnBoarding' as 'LanguageViewController'.") }
        if _R.storyboard.onBoarding().loginViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'loginViewController' could not be loaded from storyboard 'OnBoarding' as 'LoginViewController'.") }
        if _R.storyboard.onBoarding().permissionViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'permissionViewController' could not be loaded from storyboard 'OnBoarding' as 'PermissionViewController'.") }
        if _R.storyboard.onBoarding().welcomeViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'welcomeViewController' could not be loaded from storyboard 'OnBoarding' as 'WelcomeViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct splashScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = SplashScreenViewController

      let bundle = R.hostingBundle
      let name = "SplashScreen"
      let splashScreenViewController = StoryboardViewControllerResource<SplashScreenViewController>(identifier: "SplashScreenViewController")

      func splashScreenViewController(_: Void = ()) -> SplashScreenViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: splashScreenViewController)
      }

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.splashScreen().splashScreenViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'splashScreenViewController' could not be loaded from storyboard 'SplashScreen' as 'SplashScreenViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    fileprivate init() {}
  }
  #endif

  fileprivate init() {}
}
